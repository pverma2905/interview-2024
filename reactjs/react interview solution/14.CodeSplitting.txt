1)What is Code Splitting in React?
Code splitting is a technique to split the JavaScript
bundle into smaller chunks, which are loaded ondemand

2)How to Implement Code Splitting in React?
❖ 3 steps for Code splitting in React:
1. Use React.lazy() to lazily import components.
2. Wrap components with Suspense to handle loading.
3. Configure your build tool (e.g., Webpack) for dynamic imports. 
3)What is the role of Lazy and Suspense methods in React?
React.lazy is a function that allows you to
load a component lazily.

❖ It enables code splitting by allowing you
to import a component asynchronously/
dynamically, meaning component is
loaded only when needed only.

❖ The Suspense component is used to
display a fallback UI while the lazily
loaded component is being fetched.

4)What are the Pros and Cons of Code Splitting?
5 Pros of Code Splitting:
1. Faster Initial Load Time: Code splitting reduces the initial load time of your application by only loading
the necessary code for the current view or feature. Good for performance.
2. Optimized Bandwidth Usage: By loading only, the code needed for a specific page, it reduces the amount of
data transferred over the network. Good for slow network.
3. Improved Caching: Smaller, more focused code chunks are more likely to be cached by the browser.
4. Parallel Loading: Multiple smaller chunks can be loaded simultaneously, leading to faster overall
loading times.
5. Easier Maintenance: Code splitting can make your codebase more modular, independent and easier to maintain.

5)What is the role of the import() function in code splitting?
The import() function returns a promise
that allow dynamic loading of modules.

6)What is the purpose of the fallback prop in Suspense?
❖ The fallback prop provides a loading
indicator or UI while the dynamically
imported component is being loaded.

7)Can you dynamically load CSS files using code splitting in React?
❖ Yes, using dynamic import() for CSS files allows
you to load styles on-demand along with the
corresponding components. 

8)How do you inspect and analyze the generated chunks in a React application?
❖ Use tools like Webpack Bundle Analyzer to
analyze the size and composition of chunks.
