Aggregation:- A pipeline query
It group the data from multiple document in to single document based on specified expression

It is process in mongodb consist of several stages each stage transforming the data in some way
the output of one stage is the input of another stage and so on. until the final stage produce the desired result

In mongodb provide several built in aggregation pipeline to perform various operation such as $group, $sum, $avg, $min,$max, $match etc

db.aggregate.collection(pipeline,options)

pipeline:- Array of different operation

{$match:{gender:"Male"}}

{$group:{_id:expression, field1:expression, field2:expression}}

1)/// match all male teachers?
 db.teachers.aggregate([{$match:{gender:"Male"}}])


2)group teacher by age?
 db.teachers.aggregate([{$group:{_id:"$age"}}])

3)group teacher by age show all teacher name per age group? 
db.teachers.aggregate([{$group:{_id:"$age", names:{$push:"$name"}}}])

4)group teacher by age and also show complete document per age group?
db.teachers.aggregate([{$group:{_id:"$age", pooraDoc:{$push:"$$ROOT"}}}])

5)give a count of per age of male teacher?
 db.teachers.aggregate([{$match:{gender:"Male"}},{$group:{_id:"$age",number:{$sum:1} }}])

6)give a count per age of male students and sort them by count in desc manner? 
 db.teachers.aggregate([{$match:{gender:"Male"}},{$group:{_id:"$age",number:{$sum:1}}},{$sort:{number:-1}}])

7)give a count per age of male students and sort them by count in desc manner , maximum age group number?
db.teachers.aggregate([{$match:{gender:"Male"}},{$group:{_id:"$age",number:{$sum:1}}},{$sort:{number:-1}},{$group:{_id:null,maxNumber:{$max:"$number"}}}])

8)$toDouble operator?
/// sum of age in each age group?
db.teachers.aggregate([{$group:{_id:"$age",sumOfAgeInEachAgeGroup:{$sum:{$toDouble:"$age"}}}}])
db.teachers.aggregate([{$group:{_id:"$age",sumOfAgeInEachAgeGroup:{$sum:"$age"}}}])

9)find Hobbies for per age  group?
db.teachers.aggregate([{$group:{_id:"$age",sumOfAgeInEachAgeGroup:{$sum:"$age"}}}])

10)After grouping Hobbies remove nested array?
db.students.aggregate([{$unwind:"$Hobbies"},{$group:{_id:"$age",hobbies:{$push:"$Hobbies"}}}])

11) find number of students per each hobbies?
db.students.aggregate([{$unwind:"$Hobbies"},{$group:{_id:"$Hobbies",NoOfStudents:{$sum:1}}}])

12)find average age of all students?
 db.students.aggregate([{$group:{_id:null,averageAge:{$avg:"$age"}}}])

13)find total no of hobbies for all student?
db.students.aggregate([{$unwind:"$Hobbies"},{$group:{_id:null,countOfHobbies:{$sum:1}}}])  
db.students.aggregate([{$group:{_id:null,countOfHobbies:{$sum:{$size:{$ifNull:["$Hobbies",[]]}}}}}])

14)list all hobbies?
 db.students.aggregate([{$unwind:"$Hobbies"},{$group:{_id:null,Hobbies:{$push:"$Hobbies"}}}])
 db.students.aggregate([{$unwind:"$Hobbies"},{$group:{_id:null,Hobbies:{$addToSet:"$Hobbies"}}}])

15)find average of scores for student whose age is greater  than 20?
db.score.aggregate([{$group:{_id:null,avgScore:{$avg:{$filter:{input:"$score", as:"score", cond:{$gt:["$age",20]}}}}}}]) 

16)$bucket?
group of student 10-20,20-30

17)categorize  male teacher based on their age 3 bucket <30 and gt  than 40?
db.teachers.aggregate([{$match:{gender:"Male"}},{$bucket:{groupBy:"$age",boundaries:[0,20,40],default:"Grater than 40 wala group",output:{count:{$sum:1}}}}])

18)$lookup?
1)left outer join=>
db.cust.aggregate([{$lookup:{from:"orders",localField:"_id",foreignField:"customer_id",as:"orderDetail"}}]) 

2)right outer join=>
db.orders.aggregate([{$lookup:{from:"cust",localField:"customer_id",foreignField:"_id",as:"orderDetail"}}])

3)inner join=> 
db.orders.aggregate([{$lookup:{from:"cust",localField:"customer_id",foreignField:"_id",as:"orderDetail"}},{ $match : { "orderDetail" : { $ne : []}}}]);

4)outer join=>

19)capped collection?
db.createCollection
