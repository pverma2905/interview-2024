Global execution context- Javascript create global execution context  before start execution.
function and variable are stored in global execution context initailly
After code going to execute each function create own execution context
It is associated with global object and window object
variable stored in global execution stack

Execution context - It is a environment in which code is executed, Each function create own execution stack

Execution stack- It store all execution station during code execution

Execution Stack:

A stack structure managing the function call sequence.
Tracks function calls and their return points.
Functions are pushed onto and popped off the stack as they are called and completed.

Execution Context:

An abstract environment in which code is executed.
Includes the variable object, scope chain, and this binding.
Created for global code, function calls, and occasionally for eval().

Types of Execution Contexts:

Global Execution Context: The default context in which the code runs initially. There is only one global execution context in a program.
Function Execution Context: Created whenever a function is invoked. Each function call has its own execution context.
Eval Execution Context: Created when code is executed inside an eval() function (rarely used and generally discouraged).