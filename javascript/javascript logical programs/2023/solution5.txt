################################# Quick Tech #######################################
//1) count each no..

let arr = [1,2,3,4,1,1,2,3];
let obj = {};
arr.forEach(data=>{
    obj[data]=obj[key]+1||1
})
console.log("xxx",obj)

######################  Remove ###########################
####Remove1
//2) remove specific no multple remove..


const removeItem = (arr,value)=>{
    let i=0;
    while(i<arr.length){
        if(arr[i]===value){
            arr.splice(i,1)
        }else{
            ++i;
        }
    }
    console.log(arr)

}
removeItem([1,2,3,4,1,1,2,3],1)
console.log("xxx",obj)


3)single item remove?    ####Remove2
const removeItem = (arr, value)=>{
    let index =  arr.indexOf(value);
    if(index>-1){
     arr.splice(index,1)
    }
    console.log(arr)
}
removeItem(arr,i)

let arr = [1,2,3,4,1,1,2,3];


4)Multiple remove With Filter?
const removeItem = (arr, value)=>{
arr = arr.filter(ele=>ele!=value)
console.log(arr)
}
removeItem([1,2,3,4,1,1,2,3],1)

5)remove?
arr1=[1,2,3];
arr2=[1,2,3,4,5];

const remove = (arr1,arr2)=>{
arr2 = arr2.filter(ele=>!arr1.includes(ele));
console.log(arr2)
}
remove([1,2,3],[1,2,3,4,5])

6)unique?
let arr = [1,2,3,4,1,2];
console.log(...new Set(arr))

7)unique?
let arr = [1,2,3,4,1,2];
newArr = [];
arr.map((data)=>{
    if(!newArr.includes(data)){
        newArr.push(data)
    }
})
console.log(newArr)

8)find Unique without using inbuilt function?
arr=[1,2,3,4,5,2,3,4];
newArr=[];
for(let i=0; i<arr.length; i++){
    if(arr.indexOf(arr[i])==i){
        newArr.push(arr[i])
    }
}
console.log(newArr)

9)find duplicate no without using inbuilt function?
arr=[1,2,3,4,5,2,3,4];
newArr=[];
for(let i=0; i<arr.length; i++){
    if(arr.indexOf(arr[i])!=i){
        newArr.push(arr[i])
    }
}
console.log(newArr)

10)sort?
let arr = [8,7,6,5];
let swap;
for(let i=0;i<arr.length; i++){
    for(let j=i;j<arr.length; j++){
        if(arr[i]>arr[j]){
            swap=arr[i];
            arr[i]=arr[j];
            arr[j]=swap
        }
    }
}
console.log(arr)

11)design pattern?
1)Singleton pattern:
The singleton pattern ensures that there is only one instance of a class. This can be useful for classes that manage resources, such as a database connection.
2)Prototype pattern:
The prototype pattern allows you to create objects that inherit properties and methods from a prototype object. This is similar to class-based inheritance in object-oriented programming.
3)Observer pattern:
The observer pattern lets you define a subscription mechanism to notify multiple objects about any events that happen to the object they're observing.
4)Factory method pattern:
The factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created.
5)Abstract factory pattern:
The abstract factory pattern is a creational pattern that provides an interface for creating families of related objects without specifying their concrete classes.

