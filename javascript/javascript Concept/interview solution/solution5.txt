1)promise to async await
2)promise chaining?

// Simulate asynchronous operations with promises
function fetchData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log('Data fetched');
      resolve('User data');
    }, 1000);
  });
}

function processData(data) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log('Data processed');
      resolve(`${data} processed`);
    }, 1000);
  });
}

function saveData(data) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log('Data saved');
      resolve(`${data} saved`);
    }, 1000);
  });
}

// Chaining promises
fetchData()
  .then(processData)
  .then(saveData)
  .then(result => {
    console.log('Final result:', result);
  })
  .catch(error => {
    console.error('Error:', error);
  });

  output:-

Data fetched
Data processed
Data saved
Final result: User data processed saved


3)map in rxjs?



6)middleware?
7)why async and await is better  then promise? 
8)temporal dead zone?
let and const is calling before we define is called temporal deadzone
9)prototype ?
after creating object add new properties 
inherit the property of another object
student.prototype.age=20;
10)Array.flat()? 
multiArray = [1,2,3,[4,5],[6,7,[8,9]]]
console.log(multiArray.flat(2));
console.log(multiArray.flat(Infinity));



