code step by step

1)what is typescript?
it is a superset of javascript
it is enhanced version of javascript
it is just add some new feature of just
typescript made from javascript
typescript not run in browser.first we compile and convert into javascript
it is developed  by microsoft
current version 5.1.6

2)But why we used typescript.why we are not write code in javascript?
when we used typescript check error in compile time and its not possible in javascript 
in javascript we are not define a variable is string,number, boolean; 
in typescript we add oops;
and code is managed  in typescript

3)check typescript version?
tsc -v

4)run typescript file?
tsc test.ts

6)core data type in typescript?
number, string, boolean

7)throw error in javascript?
return new Error('values are not number')

8)type inference?
typescript automatically detect the variable is string, number is called type inference
ex-> let data="hello";
data=10 /// getting error

9)let data1? type of this variable by default?
any

10)let data:5?
data=10 // getting error
data=5 // not getting error

11)differnce b/w array and tuple?
in tuple we define each specific type
ex->let role: [string, string, number, number, boolean?] = [
  "admin",
  "manager",
  1,
  3,
];

in array we define string,boolean,number type of array 

12)enum?
it is a group of constant
assign a number of each string
ex) enum Role {
  ADMIN,
  MANGER,
  READ_ONLY_USER,
}

13)union type?
function combine(a: number | string, b: number | string) {
  if (typeof a === "number" && typeof b === "number") {
    return a + b;
  } else {
    return a.toString() + b.toString();
  }
}

14)Literal Type?
ex)let variable1: "a" | "b" | "c";

variable1 = "a";
console.log(variable1); // No error

//variable1 = "d";
//console.log(variable1); // Error

15)alias-type?
type variable = string | number | boolean | undefined | null;

let a: variable = "pranav";
let b: variable = 123;
let c: variable = true;
let d: variable = undefined;
let e: variable = null;

16)function type?
function add1(): number {
  // return "vvvvvvvv";
  return 50;
}

17)void?
return nothing 

18)unknown?
mainly use unknown replace of any type

19)differnce b/w unknown and any?
let data: unknown;

data = "hello";
let item: String;

item = data; /// error Type 'unknown' is not assignable to type 'String'

if(typeof data=='string'){
    item = data;
}

20)never type?
when error occur its type to be set never but by default it is return void
function apiError(msg, code): never {
  throw { message: msg, apiCode: code };
}

console.log(apiError("server side error", 500))

21)multiple ts file can compile in one js file?
tsc -w/ tsc

22)generate tsconfig file?
tsc -init

23)include and exclude in tsconfig?
include the file for compilation
exclude the file for compilation 

24) target configuration in tsconfig? 
change the  configuration for using latest ecmascript

25)rootDir and outDir?
rootDir->  it told which folder u need to compile
outDir-> it told all js file made for which location

26)remove comments?
it remove the comment on build time

27)remove console.log()?
in main.ts
if(env.production){
  window.console.log = ()=>{}
}

28)code quality improvement?
1)noUnusedLocals
2)noUnusedParameters
3)noFallthroughCasesInSwitch
4)noImplicitReturns

29)differnce b/w es5 and es6?
es5=>  
1)doe not apply oops concept
2)argument type is not must 
es6=> 
1)apply oops concept
2)argument type is must









