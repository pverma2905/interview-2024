21)security implementation that are present in node js?
1)error handling
2)security piplines
3)helmet

22)what is libuv?
libuv` is an open-source library that provides support for asynchronous I/O based operations
`libuv` is more than just a piece of Node.js; it’s a powerful tool that enables Node.js to be fast, efficient, and scalable

`libuv` offers several key features:

- Event Loop: The event-driven architecture that allows Node.js to perform non-blocking tasks.
- Asynchronous I/O Operations: From network to file system tasks, `libuv` enables these operations to run asynchronously.
- Thread Pool: For operations that can’t be done asynchronously on the system level, `libuv` provides a thread pool to handle them without blocking the main thread.
- Cross-Platform Support: Offering a uniform experience across various operating systems.

23)differnce b/w spawn and fork?
spawn->
Create a streaming interface. Useful for continuous data transfer in binary / encoded format.
Does not create a new v8 instance.
child_process.spawn creates a new process from scratch

Fork->
Create communication channel b/w parent and child process. Useful for sending individual messages in json/xml.
Create a new v8 instance.
child_process.Fork creates a child process that is a copy of the parent process

24)differnce b/w exec, fork, spawn?
Exec is used to execute a command in a child process, while fork and spawn are used to create new child processes.
Exec requires a shell environment, while fork and spawn can use a Node.js environment.
Fork creates a child process that is a copy of the parent process, while spawn creates a new process from scratch.
Exec is typically used for short-lived processes, while fork and spawn are typically used for long-lived processes.
Exec allows for capturing the child process’s output and error streams, while fork and spawn stream the output and error streams back to the parent process.
Fork allows for IPC between the parent and child processes, while exec and spawn do not.

24)middleware in node js?
middleware it is function that have req, res, next

it exexcute any code
update the request and response
end the reques response
call the next middleware 


there we can exexcute some code or user validated if all are success then it code to routes otherwise it pass to the browser

type of middleware:-
1.Application-Level Middleware: Middleware that is bound to an instance of express() and is used throughout the application.

// Simple middleware function
function logRequest(req, res, next) {
    console.log(`${req.method} ${req.url}`);
    next(); // Pass control to the next middleware function
}

// Apply middleware globally to all routes
app.use(logRequest);



2.Router-Level Middleware: that can be used with in the routes

3.Built-In Middleware: Middleware functions provided by Express, such as express.json() and express.static().

// Built-in middleware for parsing JSON
app.use(express.json());

// Built-in middleware for serving static files
app.use(express.static('public'));


4.Third-Party Middleware: Middleware provided by third-party packages, such as body-parser, cors, and morgan.
5.Error-Handling Middleware: Middleware that handles errors. This middleware has four parameters: err, req, res, and next.




25)why is assert used in node js?
The Node.js Assert is a way to write tests. It provides no feedback when running your test unless one fails. The assert module provides a simple set of assertion tests that can be used to test invariants. The module is intended for internal use by Node.js, but can be used in application code via require ('assert').

var assert = require('assert');    
function add (a, b) {    
  return a + b;    
}    
var expected = add(1,2);    
assert( expected === 3, 'one plus two is three');  

26)what are stub in node js?
stubs are used in testing to replace real functions with controlled versions that simulate specific behaviors. They are a powerful tool for isolating code under test, speeding up tests, and making them more reliable. Stubs are commonly implemented using libraries like Sinon.js, which provide a flexible and comprehensive API for creating and managing stubs.

27)why buffer class use in node js
The Buffer class in Node.js is essential for managing and processing binary data efficiently. It provides a way to handle raw binary data directly, perform low-level operations, and interact with external systems like files and network protocols. Buffers are crucial for high-performance applications where efficient memory management and processing of binary data are necessary.
1. Handling Binary Data
2. Efficient Memory Management
3. Performance Optimization
4. Interacting with External Systems


28)what is the use of connect module in node js?
connect Module: Was used to build middleware-based web applications, providing a flexible way to manage request and response processing through middleware functions.
Middleware Architecture: Allowed composition of middleware functions for handling various aspects of HTTP requests and responses.
Built-In Middleware: Included common middleware functions for tasks such as serving static files and parsing request bodies.
Transition to Express.js: Express.js, which builds on the concepts from connect, has become the preferred framework for web applications in Node.js, offering a more comprehensive and feature-rich environment.


29)what are the stream in node js?
The Streams are the objects that facilitate you to read data from a source and write data to a destination. There are four types of streams in Node.js:

Readable: This stream is used for reading operations.
Writable: This stream is used for write operations.
Duplex: This stream can be used for both reading and write operations.
Transform: It is a type of duplex stream where the output computes according to input.

30)type os stream available in node js?